Parameters:
  Vpc:
    Type: "AWS::EC2::VPC::Id"
  Subnet1:
    Type: "AWS::EC2::Subnet::Id"
  Subnet2:
    Type: "AWS::EC2::Subnet::Id"
Transform:
  - "AWS::CodeDeployBlueGreen"
Hooks:
  CodeDeployBlueGreenHook:
    Properties:
      TrafficRoutingConfig:
        Type: AllAtOnce
      ServiceRole: CodeDeployBlueGreenServiceRole
      LifecycleEventHooks:
        AfterAllowTestTraffic: lbd-after-allow-traffic-hook
      Applications:
        - Target:
            Type: "AWS::ECS::Service"
            LogicalID: ECSBlueGreenService
          ECSAttributes:
            TaskDefinitions:
              - BlueTaskDefinition
              - GreenTaskDefinition
            TaskSets:
              - BlueTaskSet
              - GreenTaskSet
            TrafficRouting:
              ProdTrafficRoute:
                Type: "AWS::ElasticLoadBalancingV2::Listener"
                LogicalID: NLBListenerProdTraffic
              TestTrafficRoute:
                Type: "AWS::ElasticLoadBalancingV2::Listener"
                LogicalID: NLBListenerTestTraffic
              TargetGroups:
                - NLBTargetGroupBlue
                - NLBTargetGroupGreen
    Type: "AWS::CodeDeploy::BlueGreen"
Resources:
  ExampleSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: aws-blue-green-group
      GroupDescription: Security group for ec2 access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  NLBTargetGroupBlue:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: tg-blue-aws-blue-green
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 80
      Protocol: TCP
      Tags:
        - Key: Group
          Value: Example
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
  NLBTargetGroupGreen:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: tg-green-aws-blue-green
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 80
      Protocol: TCP
      Tags:
        - Key: Group
          Value: Example
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
  ExampleNLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: nlb-aws-blue-green
      Scheme: internal
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      Tags:
        - Key: Group
          Value: Example
      Type: network
      IpAddressType: ipv4
  NLBListenerTestTraffic:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref NLBTargetGroupBlue
      LoadBalancerArn: !Ref ExampleNLB
      Port: 5080
      Protocol: TCP
  NLBListenerProdTraffic:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref NLBTargetGroupBlue
      LoadBalancerArn: !Ref ExampleNLB
      Port: 80
      Protocol: TCP
  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: AwsBlueGreenRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  BlueTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ExecutionRoleArn: !GetAtt
        - ECSTaskExecutionRole
        - Arn
      ContainerDefinitions:
        - Name: DemoApp
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/blue-green-demo-app:v1"
          PortMappings:
            - Protocol: tcp
              ContainerPort: 8080
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: "256"
      Memory: "512"
      Family: aws-blue-green
  ECSBlueGreenCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: aws-blue-green-cluster
  ECSBlueGreenService:
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: svc-aws-blue-green
      Cluster: !Ref ECSBlueGreenCluster
      DesiredCount: 1
      DeploymentController:
        Type: EXTERNAL
  BlueTaskSet:
    Type: "AWS::ECS::TaskSet"
    Properties:
      Cluster: !Ref ECSBlueGreenCluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ExampleSecurityGroup
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Ref ECSBlueGreenService
      TaskDefinition: !Ref BlueTaskDefinition
      LoadBalancers:
        - ContainerName: DemoApp
          ContainerPort: 8080
          TargetGroupArn: !Ref NLBTargetGroupBlue
  PrimaryTaskSet:
    Type: "AWS::ECS::PrimaryTaskSet"
    Properties:
      Cluster: !Ref ECSBlueGreenCluster
      Service: !Ref ECSBlueGreenService
      TaskSetId: !GetAtt
        - BlueTaskSet
        - Id
  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodeDeployBlueGreenServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"

# The resources bellow are responsible to handle the AfterAllowTestTraffic event
  VerifyListenerStateQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 60
      QueueName: verify-listener-state
  PutLifecycleStateQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 15
      QueueName: put-lifecycle-state
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AwsLambdaBlueGreenRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PutLifecycleStatusPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - codedeploy:PutLifecycleEventHookExecutionStatus
                  - codedeploy:CreateCloudFormationDeployment
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DescribeTargetHealth
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
  AfterAllowTrafficHookLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lbd-after-allow-traffic-hook
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref ExampleSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
      Environment:
        Variables:
          QUEUE_URL: !Ref VerifyListenerStateQueue
      Code:
        ZipFile: |
          const aws = require('aws-sdk');
          const sqs = new aws.SQS();
          exports.handler = async (event, context) => {
            const messageParams = {
              MessageAttributes: {
                "DeploymentId": {
                  DataType: "String",
                  StringValue: event.DeploymentId
                },
                "LifecycleEventHookExecutionId": {
                  DataType: "String",
                  StringValue: event.LifecycleEventHookExecutionId
                }
              },
              MessageBody: "new event",
              QueueUrl: process.env.QUEUE_URL
            };
            return sqs.sendMessage(messageParams).promise();
          };
  VerifyListenerStateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lbd-verify-listener-state
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref ExampleSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
      Environment:
        Variables:
          ELB_LISTENER_ARN: !Ref NLBListenerTestTraffic
          QUEUE_URL: !Ref PutLifecycleStateQueue
      Code:
        ZipFile: |
          const aws = require('aws-sdk');
          const sqs = new aws.SQS();
          const elb = new aws.ELBv2();
          exports.handler = async (event, context) => {
            const attributes = event.Records[0].messageAttributes;
            console.log(attributes);
            const describeListenersParams = {
              ListenerArns: [
                process.env.ELB_LISTENER_ARN
                ]
            };
            const listener =  await elb.describeListeners(describeListenersParams).promise();
            console.log(listener);
            const describeTargetHealthParams = {
              TargetGroupArn: listener.Listeners[0].DefaultActions[0].TargetGroupArn
            };
            const targetHealth = await elb.describeTargetHealth(describeTargetHealthParams).promise();
            console.log(targetHealth);
            const state = targetHealth.TargetHealthDescriptions[0].TargetHealth.State;
            if(state != 'initial') {
              const messageParams = {
                MessageAttributes: {
                  "DeploymentId": {
                    DataType: "String",
                    StringValue: attributes.DeploymentId.stringValue
                  },
                  "LifecycleEventHookExecutionId": {
                    DataType: "String",
                    StringValue: attributes.LifecycleEventHookExecutionId.stringValue
                  }
                },
                MessageBody: state,
                QueueUrl: process.env.QUEUE_URL
              };
              return sqs.sendMessage(messageParams).promise();
            }
            return Promise.reject('Health status not ready yet');
          };
  VerifyListenerStateSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt VerifyListenerStateQueue.Arn
      FunctionName: !GetAtt VerifyListenerStateLambda.Arn
  PutLifecycleStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lbd-put-lifecycle-status
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref ExampleSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
      Environment:
        Variables:
          NLB_URL: !GetAtt ExampleNLB.DNSName
      Code:
        ZipFile: |
          const http = require('http')
          const aws = require('aws-sdk');
          const codedeploy = new aws.CodeDeploy();
          exports.handler = async (event, context) => {
              const attributes = event.Records[0].messageAttributes;
              console.log(attributes);
              const options = {
                hostname: process.env.NLB_URL,
                port: 5080,
                method: 'GET'
              };
              console.log(options);
              const resp = JSON.parse(await doRequest(options));
              console.log(resp);
              const params = {
                deploymentId: attributes.DeploymentId.stringValue,
                lifecycleEventHookExecutionId: attributes.LifecycleEventHookExecutionId.stringValue,
                status: resp.status == 'OK' ? 'Succeeded' : 'Failed'
              };
              console.log(params);
              return codedeploy.putLifecycleEventHookExecutionStatus(params).promise();
          };

          function doRequest(options) {
            return new Promise ((resolve, reject) => {
              let req = http.request(options);
              let body = ''; 

              req.on('response', res => {
                res.on('data', chunk => body += chunk);
                res.on('end', () => resolve(body));
              });

              req.on('error', err => {
                reject(err);
              });

              req.end();
            }); 
          }
  PutLifecycleStateSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt PutLifecycleStateQueue.Arn
      FunctionName: !GetAtt PutLifecycleStatusLambda.Arn