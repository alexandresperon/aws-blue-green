Parameters:
  Vpc:
    Type: "AWS::EC2::VPC::Id"
  Subnet1:
    Type: "AWS::EC2::Subnet::Id"
  Subnet2:
    Type: "AWS::EC2::Subnet::Id"
Transform:
  - "AWS::CodeDeployBlueGreen"
Hooks:
  CodeDeployBlueGreenHook:
    Properties:
      TrafficRoutingConfig:
        Type: AllAtOnce
      ServiceRole: CodeDeployBlueGreenServiceRole
      LifecycleEventHooks:
        AfterAllowTestTraffic: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lbd-after-allow-traffic-hook
      Applications:
        - Target:
            Type: "AWS::ECS::Service"
            LogicalID: ECSBlueGreenService
          ECSAttributes:
            TaskDefinitions:
              - BlueTaskDefinition
              - GreenTaskDefinition
            TaskSets:
              - BlueTaskSet
              - GreenTaskSet
            TrafficRouting:
              ProdTrafficRoute:
                Type: "AWS::ElasticLoadBalancingV2::Listener"
                LogicalID: NLBListenerProdTraffic
              TestTrafficRoute:
                Type: "AWS::ElasticLoadBalancingV2::Listener"
                LogicalID: NLBListenerTestTraffic
              TargetGroups:
                - NLBTargetGroupBlue
                - NLBTargetGroupGreen
    Type: "AWS::CodeDeploy::BlueGreen"
Resources:
  ExampleSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: aws-blue-green-group
      GroupDescription: Security group for ec2 access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  NLBTargetGroupBlue:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: tg-blue-aws-blue-green
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 80
      Protocol: TCP
      Tags:
        - Key: Group
          Value: Example
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
  NLBTargetGroupGreen:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: tg-green-aws-blue-green
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 80
      Protocol: TCP
      Tags:
        - Key: Group
          Value: Example
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
  ExampleNLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: nlb-aws-blue-green
      Scheme: internal
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      Tags:
        - Key: Group
          Value: Example
      Type: network
      IpAddressType: ipv4
  NLBListenerTestTraffic:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref NLBTargetGroupBlue
      LoadBalancerArn: !Ref ExampleNLB
      Port: 5080
      Protocol: TCP
  NLBListenerProdTraffic:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref NLBTargetGroupBlue
      LoadBalancerArn: !Ref ExampleNLB
      Port: 80
      Protocol: TCP
  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: AwsBlueGreenRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  BlueTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ExecutionRoleArn: !GetAtt
        - ECSTaskExecutionRole
        - Arn
      ContainerDefinitions:
        - Name: DemoApp
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/blue-green-demo-app:v1"
          PortMappings:
            - Protocol: tcp
              ContainerPort: 8080
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: "256"
      Memory: "512"
      Family: aws-blue-green
  ECSBlueGreenCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: aws-blue-green-cluster
  ECSBlueGreenService:
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: svc-aws-blue-green
      Cluster: !Ref ECSBlueGreenCluster
      DesiredCount: 1
      DeploymentController:
        Type: EXTERNAL
  BlueTaskSet:
    Type: "AWS::ECS::TaskSet"
    Properties:
      Cluster: !Ref ECSBlueGreenCluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ExampleSecurityGroup
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Ref ECSBlueGreenService
      TaskDefinition: !Ref BlueTaskDefinition
      LoadBalancers:
        - ContainerName: DemoApp
          ContainerPort: 8080
          TargetGroupArn: !Ref NLBTargetGroupBlue
  PrimaryTaskSet:
    Type: "AWS::ECS::PrimaryTaskSet"
    Properties:
      Cluster: !Ref ECSBlueGreenCluster
      Service: !Ref ECSBlueGreenService
      TaskSetId: !GetAtt
        - BlueTaskSet
        - Id
  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodeDeployBlueGreenServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"